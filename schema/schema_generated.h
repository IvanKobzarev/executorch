// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCHEMA_EXECUTORCH_H_
#define FLATBUFFERS_GENERATED_SCHEMA_EXECUTORCH_H_

#include "flatbuffers/flatbuffers.h"

namespace executorch {

struct Program;
struct ProgramBuilder;

struct Program FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ProgramBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VERSION = 4
  };
  uint32_t version() const {
    return GetField<uint32_t>(VT_VERSION, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_VERSION, 4) &&
           verifier.EndTable();
  }
};

struct ProgramBuilder {
  typedef Program Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_version(uint32_t version) {
    fbb_.AddElement<uint32_t>(Program::VT_VERSION, version, 0);
  }
  explicit ProgramBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Program> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Program>(end);
    return o;
  }
};

inline flatbuffers::Offset<Program> CreateProgram(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t version = 0) {
  ProgramBuilder builder_(_fbb);
  builder_.add_version(version);
  return builder_.Finish();
}

inline const executorch::Program *GetProgram(const void *buf) {
  return flatbuffers::GetRoot<executorch::Program>(buf);
}

inline const executorch::Program *GetSizePrefixedProgram(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<executorch::Program>(buf);
}

inline const char *ProgramIdentifier() {
  return "ET01";
}

inline bool ProgramBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, ProgramIdentifier());
}

inline bool SizePrefixedProgramBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, ProgramIdentifier(), true);
}

inline bool VerifyProgramBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<executorch::Program>(ProgramIdentifier());
}

inline bool VerifySizePrefixedProgramBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<executorch::Program>(ProgramIdentifier());
}

inline const char *ProgramExtension() {
  return "extorch";
}

inline void FinishProgramBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<executorch::Program> root) {
  fbb.Finish(root, ProgramIdentifier());
}

inline void FinishSizePrefixedProgramBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<executorch::Program> root) {
  fbb.FinishSizePrefixed(root, ProgramIdentifier());
}

}  // namespace executorch

#endif  // FLATBUFFERS_GENERATED_SCHEMA_EXECUTORCH_H_
